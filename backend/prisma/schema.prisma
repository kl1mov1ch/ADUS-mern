generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  email           String           @unique
  password        String
  name            String?
  avatarUrl       String?
  dateOfBirth     DateTime?
  role            Role             @default(STUDENT)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  bio             String?
  location        String?
  tests           Test[]           @relation("TestTeacher")
  grades          Grade[]          @relation("StudentGrades")
  answers         Answer[]
  testAssignments TestAssignment[]
  userClasses     UserClass[] // Связь с промежуточной моделью
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
}

model Class {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  userClasses    UserClass[] // Связь с промежуточной моделью
  TestAssignment TestAssignment[]
}

model UserClass {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  user    User   @relation(fields: [userId], references: [id])
  userId  String @db.ObjectId
  class   Class  @relation(fields: [classId], references: [id])
  classId String @db.ObjectId
}

model Test {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  description     String
  imageUrl        String?
  teacher         User              @relation("TestTeacher", fields: [teacherId], references: [id])
  teacherId       String            @db.ObjectId
  questions       Question[]
  testAssignments TestAssignment[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  grades          Grade[]
  categories      TestCategory[]
  subcategories   TestSubcategory[]
  isHidden        Boolean           @default(false)
}

model TestCategory {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  testId     String   @db.ObjectId
  categoryId String   @db.ObjectId
  test       Test     @relation(fields: [testId], references: [id])
  category   Category @relation(fields: [categoryId], references: [id])
}

model Category {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  subcategories Subcategory[]
  tests         TestCategory[] // Теперь связь через промежуточную модель
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model TestSubcategory {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  testId        String      @db.ObjectId
  subcategoryId String      @db.ObjectId
  test          Test        @relation(fields: [testId], references: [id])
  subcategory   Subcategory @relation(fields: [subcategoryId], references: [id])
}

model Subcategory {
  id         String            @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  category   Category          @relation(fields: [categoryId], references: [id])
  categoryId String            @db.ObjectId
  tests      TestSubcategory[] // Теперь связь через промежуточную модель
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
}

model Question {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  text          String
  options       String[]
  correctAnswer String[]
  test          Test     @relation(fields: [testId], references: [id])
  testId        String   @db.ObjectId
  answers       Answer[]
  imageUrl      String?
  videoUrl      String?
}

model Answer {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  content    String
  student    User     @relation(fields: [studentId], references: [id])
  studentId  String   @db.ObjectId
  question   Question @relation(fields: [questionId], references: [id])
  questionId String   @db.ObjectId
  isCorrect  Boolean?
}

model TestAssignment {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  test        Test      @relation(fields: [testId], references: [id])
  testId      String    @db.ObjectId
  student     User?     @relation(fields: [studentId], references: [id])
  studentId   String?   @db.ObjectId
  class       Class?    @relation(fields: [classId], references: [id])
  classId     String?   @db.ObjectId
  grade       Grade?    @relation(fields: [gradeId], references: [id])
  gradeId     String?   @db.ObjectId
  percentage  Float?
  completedAt DateTime?
}

model Grade {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  value          Int
  student        User             @relation("StudentGrades", fields: [studentId], references: [id])
  studentId      String           @db.ObjectId
  test           Test             @relation(fields: [testId], references: [id])
  testId         String           @db.ObjectId
  testAssignment TestAssignment[]
}
